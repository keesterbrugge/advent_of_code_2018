1544091444679:(slurp "smalltest.txt")
1544091462748:(def test-file *1)
1544091465506:test file
1544091469891:(test-file)
1544091474147:test-file
1544091493600:(-> test-file split-lines)
1544091541393::repl/key-bindings :vicmd
1544091554083::repl/help
1544091582854::repset-key-map :vicmd
1544091618644::set-key-map :vicmd
1544091637747:(+ 2 2)
1544091656036:repl/:set-key-map :vicmd
1544091665751::repl/:set-key-map :vicmd
1544091684032::repl/:set-key-map
1544091691066::repl/set-key-map
1544091699345::repl/set-key-map :vicmd
1544091724659:(-> test-file clojure.string/split-lines)
1544091757218:(-> test-file \n    clojure.string/split-lines)
1544092103235:(def first-block (first *1))
1544092117247:first-block
1544092582265:( ->> first-block (re-matches #"#(\\d+)(.*)"))
1544093046908:( ->> first-block (re-matches #"#(\\d+)\\s@\\s(\\d+),(\\d+):\\s(\\d+)x(\\d+)$"))
1544093156757:( defn process-line [line] ( ->> line  (re-matches #"#(\\d+)\\s@\\s(\\d+),(\\d+):\\s(\\d+)x(\\d+)$")))
1544093173492:(process-line first-block)
1544093534400:(defn destructure-line [[_ id x-start y-start x-len y-len]]\n  {:x-start x-start\n   :y-start y-start\n   :x-end (+ x-start x-len)\n   :y-end (+ y-start y-len)\n   :x-len x-len\n   :y-len y-len\n   :id id})
1544093580203:( defn process-line [line] ( ->> line  (re-matches #"#(\\d+)\\s@\\s(\\d+),(\\d+):\\s(\\d+)x(\\d+)$") \n                             desctructure-line))
1544093599490:( defn process-line [line] ( ->> line  (re-matches #"#(\\d+)\\s@\\s(\\d+),(\\d+):\\s(\\d+)x(\\d+)$") \n                             destructure-line))
1544093640022:(process-line first-block)
1544093882971:(defn destructure-line [[_ id x-start y-start x-len y-len]]\n  (let [f #(Integer/parseInt #)\n  {:x-start x-start\n   :y-start y-start\n   :x-end (+ x-start x-len)\n   :y-end (+ y-start y-len)\n   :x-len x-len\n   :y-len y-len\n   :id id})
1544093905131:(defn destructure-line [[_ id x-start y-start x-len y-len]]\n  (let [f #(Integer/parseInt %)\n  {:x-start x-start\n   :y-start y-start\n   :x-end (+ x-start x-len)\n   :y-end (+ y-start y-len)\n   :x-len x-len\n   :y-len y-len\n   :id id})
1544094231033:(defn destructure-line [[_ id x-start y-start x-len y-len]]\n  (let [f #(Integer/parseInt %)\n        x-start (f x-start)        \n        y-start (f y-start)\n        x-len (f x-len)\n        y-len (f y-len)]\n  {:x-start x-start\n   :y-start y-start\n   :x-end (+ x-start x-len)\n   :y-end (+ y-start y-len)\n   :x-len x-len\n   :y-len y-len\n   :id id}))
1544094248199:(process-line first-block)
1544094293298:(defn destructure-line [[_ id x-start y-start x-len y-len]]\n  (let [f #(Integer/parseInt %)\n        x-start (f x-start)        \n        y-start (f y-start)\n        x-len (f x-len)\n        y-len (f y-len)]\n  {:x-start x-start\n   :y-start y-start\n   :x-end (+ x-start x-len)\n   :y-end (+ y-start y-len)\n   :x-len x-len\n   :y-len y-len\n   :id (f id) }))
1544094301165:(process-line first-block)
1544094479560:(map process-line (clojure.string/split-lines test-file))
1544094708416:(defn [file-name] (map process-line (clojure.string/split-lines (slurp file-name))))
1544094786864:(defn [my-file-name] (map process-line (clojure.string/split-lines (slurp my-file-name))))
1544094820672:(defn file->blocks [my-file-name] (map process-line (clojure.string/split-lines (slurp my-file-name))))
1544094844132:(file->blocks "input1.txt")
1544094888147:(file->blocks "input3.1.txt")
1544094939279:(file->blocks "smalltest.txt")
1544094999357:(clojure.pprint.print-table *1)
1544095056007:(clojure.pprint/print-table *1)
1544095169998:(def blocks (file->blocks "smalltest.txt"))
1544095175024:blocks
1544095273320:(sort-by :x-len blocks)
1544095417286::repl/help
1544095527253::repl/key-bindings
1544095630651:'0kkjjj
1544095635604::repl/key-bindings
